#!/usr/bin/env bash

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile" source normalize

  case "${1:-}" in
    */)
      local pth_service="$1"; shift
      cd "$pth_service"
      ;;
  esac

  local nm_color="${BASH_SOURCE##*-}"
  local nm_asg="$(pwd | perl -pe 's{.*?/([^/]+/[^/]+/[^/]+)$}{\1}; s{/}{-}g')-${nm_color}"

  if [[ -z "$nm_asg" ]]; then
    echo "ERROR: no asg group matching color $nm_color" 1>&2
    return 1
  fi

  case "${1:-}" in
    "")
      local tmp_asg="$(mktemp -t XXXXXX)"
      local tmp_instances="$(mktemp -t XXXXXX)"
      fogg "$nm_color" asg '\(.AutoScalingGroupName) min:\(.MinSize) desired:\(.DesiredCapacity) max:\(.MaxSize)' > "$tmp_asg" &
      fogg "$nm_color" instances '\(.InstanceId) \(.PrivateIpAddress) \(.PublicIpAddress//"")' > "$tmp_instances" &
      wait
      cat "$tmp_asg"
      cat "$tmp_instances"
      rm -f "$tmp_asg" "$tmp_instances"
      ;;

    asg)
      shift # asg
      local jq_refine="${1:-\(.AutoScalingGroupName) min:\(.MinSize) desired:\(.DesiredCapacity) max:\(.MaxSize)}"
      aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$nm_asg" | jq '.AutoScalingGroups' | jq 'map("'"$jq_refine"'")' | jq -r '.[]'
      ;;

    instances)
      shift # instances
      local jq_refine="${1:-\(.InstanceId) \(.PrivateIpAddress)}"
      fogg "$nm_color" asg '\(.)' | jq -r '.Instances[] | "\(.InstanceId) \(.LifecycleState) \(.HealthStatus)"' | while read -r instance_id lifecycle health; do
        echo "$(echo "$instance_id" | gxargs -r aws ec2 describe-instances --instance-ids | jq '[.Reservations[].Instances[]]' | jq 'map("'"$jq_refine"'")' | jq -r '.[]')" "$lifecycle" "$health"
      done
      ;;

    inc|dec|desired)
      local asg_cmd="$1"; shift
      local inc_by="${1:-1}"

      local cnt_desired=
      
      case "$asg_cmd" in
        inc)
          cnt_desired="$(( $(fogg "$nm_color" asg '\(.DesiredCapacity)') + inc_by ))"
          ;;
        dec)
          cnt_desired="$(( $(fogg "$nm_color" asg '\(.DesiredCapacity)') - inc_by ))"
          ;;
        desired)
          cnt_desired="${inc_by}"
          ;;
      esac

      aws autoscaling set-desired-capacity --auto-scaling-group-name "$nm_asg" --desired-capacity "$cnt_desired"
      ;;

    remove)
      shift # remove
      runmany 'aws autoscaling terminate-instance-in-auto-scaling-group --instance-id "$1" --should-decrement-desired-capacity' "$@"
      ;;

    replace)
      shift # replace
      case "${1:-}" in
        all)
          fogg "$nm_color" instances '\(.InstanceId)' | runmany 'aws autoscaling terminate-instance-in-auto-scaling-group --instance-id "$1" --no-should-decrement-desired-capacity'
          ;;

        *)
          runmany 'aws autoscaling terminate-instance-in-auto-scaling-group --instance-id "$1" --no-should-decrement-desired-capacity' "$@"
          ;;
      esac
      ;;

    *)
      echo "ERROR: no subcommand found for fogg $nm_color $1" 1>&2
      return 1
      ;;
  esac
}

source sub "$BASH_SOURCE" "$@"
