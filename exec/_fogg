#!/usr/bin/env bash

function use_module {
  local nm_module="$1"; shift
  hcltool "$shome/module/${nm_module}/variables.tf" \
    | jq --arg tfmod "$nm_module" '{
          data: (.data//{}), 
          provider: (.provider//{}), 
          variable: (.variable//{} as $vars | reduce (.variable | keys[]) as $v ({}; .[$v] = $vars[$v])), 
          output: (.output//{} | reduce keys[] as $o ({}; .[$o] = {value: "${module.\($tfmod).\($o)}"}))
        }'
}

function gen_state {
  set -- $(hcltool terraform.tfvars | jq -r '"\(.remote_bucket) \(.remote_path) \(.remote_region)"')

	jq \
		--arg remote_region "$3" \
		-n '
		{
			"provider": {
				"aws": {
					"region": $remote_region,
				}
			}
		}'
}

function gen_state_tf {
  set -- $(hcltool terraform.tfvars | jq -r '"\(.remote_bucket) \(.remote_path) \(.remote_region)"')

	jq \
		--arg remote_bucket "$1" \
		--arg remote_path "$2" \
		--arg remote_region "$3" \
    -n -r 'terraform { backend "s3" { bucket="\($remote_bucket)" key="\($remote_path)" region="\($remnote_region)" } }' > state.tf
}

function gen_global { 
  hcltool "$shome/common/${FUNCNAME##gen_}.tf" 
}

function gen_env { 
  shift
  hcltool "$shome/common/${FUNCNAME##gen_}.tf" 
}

function gen_app {
  shift
  shift
  hcltool "$shome/common/${FUNCNAME##gen_}.tf" 
}

function gen_service {
  shift
  shift
  shift
  hcltool "$shome/common/${FUNCNAME##gen_}.tf"
}

function merge_map {
  jq -s 'reduce .[] as $e ({}; . * $e)'
}

function _main {
  source normalize

  gen \
    <(gen_state) \
    <("gen_${BASH_SOURCE[2]##*-}" "$@" | merge_map) \
    <(use_module "${BASH_SOURCE[2]##*-}") \
    "$@" | jq -S .

  gen_state_tf
}

_main "$@"
