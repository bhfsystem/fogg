#!/usr/bin/env bash

function use_module {
  local nm_module="$1"; shift
  hcltool "$shome/module/${nm_module}/variables.tf" \
    | jq --arg tfmod "$nm_module" '{
          data: (.data//{}), 
          variable: (.variable//{} as $vars | reduce (.variable | keys[]) as $v ({}; .[$v] = $vars[$v])), 
          output: (.output//{} | reduce keys[] as $o ({}; .[$o] = {value: "${module.\($tfmod).\($o)}"}))
        }'
}

function gen_state {
  local remote_bucket="$(hcltool terraform.tf.json  | jq -r '.variable.remote_bucket.default')"
  local remote_path="$(hcltool terraform.tf.json  | jq -r '.variable.remote_path.default')"
  local remote_region="$(hcltool terraform.tf.json  | jq -r '.variable.remote_region.default')"

	jq \
		--arg remote_bucket "$remote_bucket" \
		--arg remote_path "$remote_path" \
		--arg remote_region "$remote_region" \
    -n -r '"terraform { backend \"s3\" { bucket=\"\($remote_bucket)\" key=\"\($remote_path)\" region=\"\($remote_region)\" } }\nprovider { aws { region=\"\($remote_region)\" } }"'
}

function gen_global { 
  hcltool "$shome/common/${FUNCNAME##gen_}.tf" 
}

function gen_env { 
  shift
  hcltool "$shome/common/${FUNCNAME##gen_}.tf" 
}

function gen_app {
  shift
  shift
  hcltool "$shome/common/${FUNCNAME##gen_}.tf" 
}

function gen_service {
  shift
  shift
  shift
  hcltool "$shome/common/${FUNCNAME##gen_}.tf"
}

function merge_map {
  jq -s 'reduce .[] as $e ({}; . * $e)'
}

function _main {
  source normalize

  gen \
    <("gen_${BASH_SOURCE[2]##*-}" "$@" | merge_map) \
    <(use_module "${BASH_SOURCE[2]##*-}") \
    "$@" | jq -S . > terraform.tf.json.1
  mv terraform.tf.json.1 terraform.tf.json

  gen_state > state.tf.1
  mv state.tf.1 state.tf
  terraform fmt state.tf 
}

_main "$@"
